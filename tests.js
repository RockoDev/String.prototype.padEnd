var assert = require('assert');
require('./padEnd.polyfill.js');

describe('String', function() {

  describe('padEnd()', function() {
    it('should return the original string if called with no parameters', function() {
      assert.equal('abcde'.padEnd(), 'abcde');
    });
  });

  describe('padEnd(targetLength)', function() {
    it('should return the original string if "targetLength" parameter converted to integer is equal or lower than the original string\'s length', function() {
      assert.equal('abcde'.padEnd(undefined), 'abcde');
      assert.equal('abcde'.padEnd(null), 'abcde');
      assert.equal('abcde'.padEnd(function(){}), 'abcde');
      assert.equal('abcde'.padEnd({}), 'abcde');
      assert.equal('abcde'.padEnd([]), 'abcde');
      assert.equal('abcde'.padEnd(''), 'abcde');
      assert.equal('abcde'.padEnd('abc'), 'abcde');
      assert.equal('abcde'.padEnd('5'), 'abcde');
      assert.equal('abcde'.padEnd('4'), 'abcde');
      assert.equal('abcde'.padEnd('3'), 'abcde');
      assert.equal('abcde'.padEnd('2'), 'abcde');
      assert.equal('abcde'.padEnd('1'), 'abcde');
      assert.equal('abcde'.padEnd('0'), 'abcde');
      assert.equal('abcde'.padEnd('-1'), 'abcde');
      assert.equal('abcde'.padEnd('-2'), 'abcde');
      assert.equal('abcde'.padEnd('-3'), 'abcde');
      assert.equal('abcde'.padEnd('-4'), 'abcde');
      assert.equal('abcde'.padEnd('-5'), 'abcde');
      assert.equal('abcde'.padEnd(3.2), 'abcde');
      assert.equal('abcde'.padEnd(1.9), 'abcde');
      assert.equal('abcde'.padEnd(1.5), 'abcde');
      assert.equal('abcde'.padEnd(1.2), 'abcde');
      assert.equal('abcde'.padEnd(0.0), 'abcde');
      assert.equal('abcde'.padEnd(-1.2), 'abcde');
      assert.equal('abcde'.padEnd(-1.5), 'abcde');
      assert.equal('abcde'.padEnd(-1.9), 'abcde');
      assert.equal('abcde'.padEnd(5), 'abcde');
      assert.equal('abcde'.padEnd(4), 'abcde');
      assert.equal('abcde'.padEnd(3), 'abcde');
      assert.equal('abcde'.padEnd(2), 'abcde');
      assert.equal('abcde'.padEnd(1), 'abcde');
      assert.equal('abcde'.padEnd(0), 'abcde');
      assert.equal('abcde'.padEnd(-1), 'abcde');
      assert.equal('abcde'.padEnd(-2), 'abcde');
      assert.equal('abcde'.padEnd(-3), 'abcde');
      assert.equal('abcde'.padEnd(-4), 'abcde');
      assert.equal('abcde'.padEnd(-5), 'abcde');
    });
    it('should return the original string padded with spaces if "targetLength" parameter converted to integer is higher than the original string\'s length', function() {
      assert.equal('abcde'.padEnd(10.9), 'abcde     ');
      assert.equal('abcde'.padEnd(7.5), 'abcde  ');
      assert.equal('abcde'.padEnd('10'), 'abcde     ');
      assert.equal('abcde'.padEnd('9'), 'abcde    ');
      assert.equal('abcde'.padEnd('8'), 'abcde   ');
      assert.equal('abcde'.padEnd('7'), 'abcde  ');
      assert.equal('abcde'.padEnd('6'), 'abcde ');
      assert.equal('abcde'.padEnd(10), 'abcde     ');
      assert.equal('abcde'.padEnd(9), 'abcde    ');
      assert.equal('abcde'.padEnd(8), 'abcde   ');
      assert.equal('abcde'.padEnd(7), 'abcde  ');
      assert.equal('abcde'.padEnd(6), 'abcde ');
    });
  });

  describe('padEnd(targetLength, padString)', function() {
    it('should return the original string if "padString" parameter is a empty string', function() {
      assert.equal('abcde'.padEnd(10, ''), 'abcde');
      assert.equal('abcde'.padEnd(9, ''), 'abcde');
      assert.equal('abcde'.padEnd(8, ''), 'abcde');
      assert.equal('abcde'.padEnd(7, ''), 'abcde');
      assert.equal('abcde'.padEnd(6, ''), 'abcde');
      assert.equal('abcde'.padEnd(5, ''), 'abcde');
      assert.equal('abcde'.padEnd(4, ''), 'abcde');
      assert.equal('abcde'.padEnd(3, ''), 'abcde');
      assert.equal('abcde'.padEnd(2, ''), 'abcde');
      assert.equal('abcde'.padEnd(1, ''), 'abcde');
      assert.equal('abcde'.padEnd(0, ''), 'abcde');
      assert.equal('abcde'.padEnd(-1, ''), 'abcde');
      assert.equal('abcde'.padEnd(-2, ''), 'abcde');
      assert.equal('abcde'.padEnd(-3, ''), 'abcde');
      assert.equal('abcde'.padEnd(-4, ''), 'abcde');
      assert.equal('abcde'.padEnd(-5, ''), 'abcde');
    });
    it('should return the original string if "targetLength" parameter converted to integer is equal or lower than the original string\'s length', function() {
      assert.equal('abcde'.padEnd(5, '.'), 'abcde');
      assert.equal('abcde'.padEnd(4, '.'), 'abcde');
      assert.equal('abcde'.padEnd(3, '.'), 'abcde');
      assert.equal('abcde'.padEnd(2, '.'), 'abcde');
      assert.equal('abcde'.padEnd(1, '.'), 'abcde');
      assert.equal('abcde'.padEnd(0, '.'), 'abcde');
      assert.equal('abcde'.padEnd(-1, '.'), 'abcde');
      assert.equal('abcde'.padEnd(-2, '.'), 'abcde');
      assert.equal('abcde'.padEnd(-3, '.'), 'abcde');
      assert.equal('abcde'.padEnd(-4, '.'), 'abcde');
      assert.equal('abcde'.padEnd(-5, '.'), 'abcde');
      assert.equal('abcde'.padEnd(5, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(4, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(3, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(2, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(1, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(0, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(-1, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(-2, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(-3, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(-4, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(-5, '.-'), 'abcde');
      assert.equal('abcde'.padEnd(5, 12345), 'abcde');
      assert.equal('abcde'.padEnd(4, 12345), 'abcde');
      assert.equal('abcde'.padEnd(3, 12345), 'abcde');
      assert.equal('abcde'.padEnd(2, 12345), 'abcde');
      assert.equal('abcde'.padEnd(1, 12345), 'abcde');
      assert.equal('abcde'.padEnd(0, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-1, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-2, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-3, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-4, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-5, 12345), 'abcde');
      assert.equal('abcde'.padEnd(5, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(4, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(3, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(2, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(1, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(0, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(-1, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(-2, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(-3, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(-4, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(-5, '12345'), 'abcde');
      assert.equal('abcde'.padEnd(5.1, 12345), 'abcde');
      assert.equal('abcde'.padEnd(4.8, 12345), 'abcde');
      assert.equal('abcde'.padEnd(3.6, 12345), 'abcde');
      assert.equal('abcde'.padEnd(2.4, 12345), 'abcde');
      assert.equal('abcde'.padEnd(1.2, 12345), 'abcde');
      assert.equal('abcde'.padEnd(0, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-1.0, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-2.2, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-3.4, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-4.6, 12345), 'abcde');
      assert.equal('abcde'.padEnd(-5.8, 12345), 'abcde');
      assert.equal('abcde'.padEnd(5, null), 'abcde');
      assert.equal('abcde'.padEnd(4, null), 'abcde');
      assert.equal('abcde'.padEnd(3, null), 'abcde');
      assert.equal('abcde'.padEnd(2, null), 'abcde');
      assert.equal('abcde'.padEnd(1, null), 'abcde');
      assert.equal('abcde'.padEnd(0, null), 'abcde');
      assert.equal('abcde'.padEnd(-1, null), 'abcde');
      assert.equal('abcde'.padEnd(-2, null), 'abcde');
      assert.equal('abcde'.padEnd(-3, null), 'abcde');
      assert.equal('abcde'.padEnd(-4, null), 'abcde');
      assert.equal('abcde'.padEnd(-5, null), 'abcde');
    });
    it('should return a string of the specified length with the pad string applied from the end', function() {
      assert.equal('abcde'.padEnd(10, '.'), 'abcde.....');
      assert.equal('abcde'.padEnd(9, '.'), 'abcde....');
      assert.equal('abcde'.padEnd(8, '.'), 'abcde...');
      assert.equal('abcde'.padEnd(7, '.'), 'abcde..');
      assert.equal('abcde'.padEnd(6, '.'), 'abcde.');
      assert.equal('abcde'.padEnd(10, '.-'), 'abcde.-.-.');
      assert.equal('abcde'.padEnd(9, '.-'), 'abcde.-.-');
      assert.equal('abcde'.padEnd(8, '.-'), 'abcde.-.');
      assert.equal('abcde'.padEnd(7, '.-'), 'abcde.-');
      assert.equal('abcde'.padEnd(6, '.-'), 'abcde.');
      assert.equal('abcde'.padEnd(10, '1234567890'), 'abcde12345');
      assert.equal('abcde'.padEnd(10, '123456789'), 'abcde12345');
      assert.equal('abcde'.padEnd(10, '12345678'), 'abcde12345');
      assert.equal('abcde'.padEnd(10, '1234567'), 'abcde12345');
      assert.equal('abcde'.padEnd(10, '123456'), 'abcde12345');
      assert.equal('abcde'.padEnd(10, '12345'), 'abcde12345');
      assert.equal('abcde'.padEnd(9, '12345'), 'abcde1234');
      assert.equal('abcde'.padEnd(8, '12345'), 'abcde123');
      assert.equal('abcde'.padEnd(7, '12345'), 'abcde12');
      assert.equal('abcde'.padEnd(6, '12345'), 'abcde1');
      assert.equal('abcde'.padEnd(10, 12345), 'abcde12345');
      assert.equal('abcde'.padEnd(9, 12345), 'abcde1234');
      assert.equal('abcde'.padEnd(8, 12345), 'abcde123');
      assert.equal('abcde'.padEnd(7, 12345), 'abcde12');
      assert.equal('abcde'.padEnd(6, 12345), 'abcde1');
      assert.equal('abcde'.padEnd(10.0, 12345), 'abcde12345');
      assert.equal('abcde'.padEnd(9.9, 12345), 'abcde1234');
      assert.equal('abcde'.padEnd(8.7, 12345), 'abcde123');
      assert.equal('abcde'.padEnd(7.5, 12345), 'abcde12');
      assert.equal('abcde'.padEnd(6.3, 12345), 'abcde1');
      assert.equal('abcde'.padEnd('10', null), 'abcdenulln');
      assert.equal('abcde'.padEnd('9', null), 'abcdenull');
      assert.equal('abcde'.padEnd('8', null), 'abcdenul');
      assert.equal('abcde'.padEnd('7', null), 'abcdenu');
      assert.equal('abcde'.padEnd('6', null), 'abcden');
    });
  });

});
